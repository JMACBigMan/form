{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","firstName","lastName","age","gender","destination","isVegan","isKosher","isLactoseFree","handleChange","bind","event","target","name","value","type","checked","this","setState","onChange","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPA+IeA,G,wDA5Ib,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,UAAW,GACXC,SAAU,GACVC,IAAK,GACLC,OAAQ,GACRC,YAAa,GACXC,SAAS,EACTC,UAAU,EACVC,eAAe,GAGnB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAbR,E,yDAgBDC,GAAQ,IAAD,EACmBA,EAAMC,OAApCC,EADW,EACXA,KAAMC,EADK,EACLA,MAAOC,EADF,EACEA,KAAMC,EADR,EACQA,QACjB,aAATD,EACAE,KAAKC,SAAL,eACOL,EAAOG,IAIdC,KAAKC,SAAL,eACGL,EAAOC,M,+BAKV,OACE,8BACE,6CACA,8BACE,2BAAOD,KAAK,YACZC,MAAOG,KAAKjB,MAAMC,UAClBkB,SAAUF,KAAKR,aACfW,YAAY,eAEZ,6BAEA,2BAAOP,KAAK,WACZC,MAAOG,KAAKjB,MAAME,SAClBiB,SAAUF,KAAKR,aACfW,YAAY,cAEZ,6BAEA,2BAAOP,KAAK,MACZC,MAAOG,KAAKjB,MAAMG,IAClBgB,SAAUF,KAAKR,aACfW,YAAY,QAEZ,6BAEA,+BACE,2BACAL,KAAK,QACLF,KAAK,SACLC,MAAM,OACNE,QAA+B,SAAtBC,KAAKjB,MAAMI,OACpBe,SAAUF,KAAKR,eANjB,SASA,+BACE,6BACA,2BACEM,KAAK,QACLF,KAAK,SACLC,MAAM,SACNE,QAA+B,WAAtBC,KAAKjB,MAAMI,OACpBe,SAAUF,KAAKR,eAPnB,WAWA,6BAEA,4BACAK,MAAOG,KAAKjB,MAAMK,YAClBQ,KAAK,cACLM,SAAUF,KAAKR,cAGf,4BAAQK,MAAM,IAAd,qCACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,WAAd,YAEA,6BAEA,+BACE,2BACAC,KAAK,WACLF,KAAK,UACLM,SAAUF,KAAKR,aACfO,QAASC,KAAKjB,MAAMM,UALtB,UAQA,6BAEA,+BACE,2BACES,KAAK,WACLF,KAAK,WACLM,SAAUF,KAAKR,aACfO,QAASC,KAAKjB,MAAMO,WALxB,WAQA,6BAEA,+BACE,2BACEQ,KAAK,WACLF,KAAK,gBACLM,SAAUF,KAAKR,aACfO,QAASC,KAAKjB,MAAMQ,gBALxB,gBAOI,8BAEJ,6BACA,2CAGF,6BACA,oDACJ,yCAAeS,KAAKjB,MAAMC,UAA1B,IAAsCgB,KAAKjB,MAAME,UAC7C,wCAAce,KAAKjB,MAAMG,KACzB,2CAAiBc,KAAKjB,MAAMI,QAC5B,gDAAsBa,KAAKjB,MAAMK,aACjC,0DACA,sCAAYY,KAAKjB,MAAMM,QAAU,MAAQ,MACzC,uCAAaW,KAAKjB,MAAMO,SAAW,MAAQ,MAC3C,4CAAkBU,KAAKjB,MAAMQ,cAAgB,MAAQ,KAAK,kC,GAtIhDa,IAAMC,YCUJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.36df6182.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      firstName: \"\",\n      lastName: \"\",\n      age: \"\",\n      gender: \"\",\n      destination: \"\",\n        isVegan: false,\n        isKosher: false,\n        isLactoseFree: false,\n      \n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange(event) {\n    const {name, value, type, checked} = event.target\n    type === \"checkbox\" ?\n    this.setState({\n          [name]: checked\n      \n    })\n    :\n    this.setState({\n      [name]: value\n    })\n  }\n\n  render() {\n    return (\n      <main>\n        <h1> Form Example</h1>\n        <form>\n          <input name=\"firstName\" \n          value={this.state.firstName} \n          onChange={this.handleChange} \n          placeholder=\"First Name\" \n          />\n          <br />\n\n          <input name=\"lastName\" \n          value={this.state.lastName} \n          onChange={this.handleChange} \n          placeholder=\"Last Name\" \n          />\n          <br />\n\n          <input name=\"age\" \n          value={this.state.age} \n          onChange={this.handleChange} \n          placeholder=\"Age\" \n          />\n          <br />\n\n          <label>\n            <input \n            type=\"radio\"\n            name=\"gender\"\n            value=\"Male\"\n            checked={this.state.gender === \"Male\"}\n            onChange={this.handleChange}\n            /> Male\n          </label>\n          <label>\n            <br />\n            <input\n              type=\"radio\"\n              name=\"gender\"\n              value=\"Female\"\n              checked={this.state.gender === \"Female\"}\n              onChange={this.handleChange}\n            /> Female\n          </label>\n\n          <br />\n\n          <select \n          value={this.state.destination} \n          name=\"destination\" \n          onChange={this.handleChange}\n          >\n\n          <option value=\"\">-- Please Choose a Destination --</option>\n          <option value=\"Hawaii\">Hawaii</option>\n          <option value=\"Puerto Rico\">Puerto Rico</option>\n          <option value=\"Brazil\">Brazil</option>\n          <option value=\"Florida\">Florida</option>\n          </select>\n          <br />\n\n          <label>\n            <input\n            type=\"checkbox\"\n            name=\"isVegan\"\n            onChange={this.handleChange}\n            checked={this.state.isVegan}\n            />Vegan?\n          </label>\n          <br />\n\n          <label>\n            <input\n              type=\"checkbox\"\n              name=\"isKosher\"\n              onChange={this.handleChange}\n              checked={this.state.isKosher}\n            />Kosher?\n          </label>\n          <br/>\n\n          <label>\n            <input\n              type=\"checkbox\"\n              name=\"isLactoseFree\"\n              onChange={this.handleChange}\n              checked={this.state.isLactoseFree}\n            />Lactose Free?\n              <br />\n          </label>\n          <br />\n          <button>Submit</button>\n\n        </form>\n        <hr />\n        <h2>Entered Information:</h2>\n    <p>Your name: {this.state.firstName} {this.state.lastName}</p>\n        <p>Your age: {this.state.age}</p>\n        <p>Your gender: {this.state.gender}</p>\n        <p>Your destination: {this.state.destination}</p>\n        <p>Your dietary restrictions: </p>\n        <p> Vegan: {this.state.isVegan ? \"Yes\" : \"No\"}</p>\n        <p> Kosher: {this.state.isKosher ? \"Yes\" : \"No\"}</p>\n        <p>Lactose Free: {this.state.isLactoseFree ? \"Yes\" : \"No\"}<p/>\n        </p>\n      </main>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}